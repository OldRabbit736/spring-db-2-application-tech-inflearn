JdbcTemplate, MyBatis
- SQL을 직접 작성해야 하는 단점은 있지만 기술이 단순하기 때문에 SQL에 익숙한 개발자라면 금방 적응할 수 있다는 장점이 있다.
- 매우 복잡한 통계 쿼리를 작성하는 데 문제가 없다.
JPA, Spring Data JPA, Querydsl
- 개발 생산성을 혁신할 수 있지만, 학습 곡선이 높다.
- 매우 복잡한 통계 쿼리에는 맞지 않는다.

영한님의 추천 방향
- JPA, 스프링 데이터 JPA, Querydsl을 기본으로 사용하되, 복잡한 쿼리는 JdbcTemplate, MyBatis 와 같은 기술을 이용해 작성.
- 실무에서 95% 정도의 문제를 JPA, 스프링 데이터 JPA, Querydsl 을 사용하여 해결하고 나머지 5%는 JdbcTemplate, MyBatis로 해결한다.
- 이 비율은 프로젝트마다 다르다. 복잡한 통계를 작성할 일이 많은 프로젝트일 수록 후자의 비율이 높아진다.

트랜잭션 매니저 선택
- JPA, 스프링 데이터 JPA, Querydsl은 JPA 기술을 사용하기 때문에 트랜잭션 매니저로 "JpaTransactionManager"를 선택하면 된다.
- 해당 기술을 사용하면 스프링 부트는 자동으로 "JpaTransactionManager"를 스프링 빈에 등록한다.
- 그런데 JdbcTemplate, MyBatis와 같은 기술들은 내부에서 JDBC를 직접 사용하기 때문에 "DataSourceTransactionManager"를 사용한다.
- 따라서 JPA와 JdbcTemplate 두 기술을 함께 사용하면 각각의 트랜잭션 매니저를 사용해야 하는 문제가 생긴다.
- 이것은 트랜잭션을 하나로 묶을 수 없는 문제로 이어진다. 하지만 이 부분은 걱정하지 않아도 된다.

JpaTransactionManager의 다양한 지원
- JpaTransactionManager는 DataSourceTransactionManager가 제공하는 기능 대부분을 제공한다.
- JPA 기술도 결국 내부에서는 DataSource와 JDBC 커넥션을 사용하기 때문이다.
- JpaTransactionManager 하나를 통해 JPA, JdbcTemplate, MyBatis 모두를 하나의 트랜잭션으로 묶을 수 있다. 함께 롤백도 가능하다.

주의점
- JPA와 JdbcTemplate을 함께 사용할 경우 JPA의 flush 타이밍에 주의해야 한다.
- JPA는 트랜잭션이 커밋되기 직전에 flush 한다.
- 따라서 하나의 트랜잭션 안에서 JPA가 데이터를 변경하고 이후 JdbcTemplate을 호출하게 된 경우에 JdbcTemplate은 JPA가 변경한 데이터를 읽지 못한다.
- 이 문제를 해결하려면 JPA 호출이 끝난 시점에 JPA가 제공하는 flush 기능을 사용하면 된다.
- flush는 JPA의 변경 쿼리를 데이터베이스에 전달하는 행위이다.
