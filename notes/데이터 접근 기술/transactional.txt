@Repository
@Transactional
public class JpaItemRepository implements ItemRepository {
    private final EntityManager em;

    public JpaItemRepository(EntityManager em) {
        this.em = em;
    }

    @Override
    public Item save(Item item) {
        em.persist(item);
        return item;
    }

    @Override
    public void update(Long itemId, ItemUpdateDto updateParam) {
        Item item = em.find(Item.class, itemId);
        item.setItemName(updateParam.getItemName());
        item.setPrice(updateParam.getPrice());
        item.setQuantity(updateParam.getQuantity());
    }
}


@Transactional
- "spring-db-1-core-principle-inflearn" 강좌의 자료 "4.스프링과 문제 해결 - 트랜잭션" 파일의 40페이지 그림 참조
- AOP 프록시를 통해 transaction 시작, 완료 를 책임져 준다.
- 먼저 AOP 프록시는 트랜잭션 매니저를 통해 데이터소스로부터 커넥션을 받아온 후 트랜잭션을 시작한다.
- 해당 커넥션을 트랜잭션 동기화 매니저에 보관한다.
- 실제 비즈니스 로직(여기서는 리포지토리 내의 메소드)을 호출한다.
- 비즈니스 로직 내에서 데이터 접근(Entity Manager 등) 로직은 전부 트랜잭션 동기화 매니저에 보관된 커넥션을 이용하게 된다.
  그럼으로써 비즈니스 로직이 하나의 트랜잭션 내에서 실행되게 된다.
- 한편 이 트랜잭션은 "영속성 컨텍스트"를 생셩하게 되며 이 영속성 컨텍스트는 1차 캐쉬, Repeatable-read, write-behind 등을 제공한다.
- 작업이 끝나면 AOP 프록시가 트랜잭션을 종료하게 되는데, 이 때 영속성 컨텍스트는 flush, commit 을 실행하게 된다.
- 트랜잭션이 종료되므로 영속성 컨텍스트는 삭제된다. (OSIV 가 off 라면)
