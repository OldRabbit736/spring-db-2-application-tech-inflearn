스프링은 왜 체크 예외는 커밋하고 언체크(런타임) 예외는 롤백할까?
- 스프링은 기본적으로 체크 예외는 비즈니스 의미가 있는 예외이고, 런타임(언체크) 예외는 복구 불가능한 예외로 가정한다.
    - 체크 예외: 비즈니스 의미가 있을 때 사용
    - 언체크 예외: 복구 불가능한 예외 (시스템 예외. 예) 데이터 베이스 접근 불가, SQL 문법 오류 등)
- 꼭 이런 정책을 따를 필요는 없다. rollbackFor 옵션 등을 사용하여 조절할 수 있다.
- 언체크 예외는 복구 불가능한 시스템 예외이므로, 잡아도 별로 할 일이 없다.
    - 따라서 트랜잭션을 롤백 처리하는 것이 일반적이다.
    - 또한 응답은 공통 처리부(Controller Advice 등)에서 처리하도록 하는 게 일반적이다.


비즈니스 의미가 있는 "비즈니스 예외"란? 간단한 예제
- 비즈니스 요구사항
    1. 정상: 주문 결제를 성공하면 주문 데이터를 저장하고 결제 상태를 "완료"로 처리한다.
    2. 시스템 예외: 주문 시 내부에 복구 불가능한 예외가 발생하면 전체 데이터를 롤백한다.
    3. 비즈니스 예외: 주문 시 결제 잔고가 부족하면 주문 데이터를 저장하고, 결제 상태를 "대기"로 처리한다.
        - 이 경우 고객에게 잔고 부족을 알리고 별도의 계좌로 입금하도록 안내한다.
        - 이 상황에서 롤백은 선택해서는 안된다. 왜냐하면 고객의 주문 데이터와 결제 데이터가 모두 사라지기 때문이다.
- 결제 잔고가 부족하면 "NotEnoughMoneyException" 이라는 체크 예외가 발생한다고 가정하겠다.
- 이 예외는 시스템 문제와 관련 없다. 시스템은 정상 동작했지만, 비즈니스 상황에서 문제가 발생하였기에 발생한 예외이다.
- 이런 예외를 비즈니스 예외라 한다.
- 비즈니스 예외는 매우 중요하고, 반드시 처리해야 하는 경우가 많으므로 체크 예외를 고려할 수 있다.
- OrderServiceTest.java 참조
    - NotEnoughMoneyException은 마치 비즈니스 상황을 알려주는 리턴 값처럼 사용되었다. (실제로 예외 대신 어떤 정보를 리턴해줘도 된다.)
    - 이런 경우에 트랜잭션을 커밋하는 것이 맞다. 아니라면 Order 자체가 사라지기 때문이다.
    - 하지만 비즈니스 상황에 따라 특정 체크 예외를 롤백 하고 싶을 수 있다. 이 때는 rollbackFor 옵션을 사용하면 된다.


핵심은,
- runtime exception 은 시스템 예외이므로 복구할 수 없는 경우가 태반이므로, rollback 을 하는 것을 기본으로 한다.
- checked exception 은 비즈니스 예외가 될 수 있으므로 롤백을 안 하는 것이 기본으로 잡혀 있지만, 선택에 따라 롤백을 할 수도 있다.
  (비즈니스 예외시 예외를 전혀 안 쓰고 그냥 리턴 값으로 알려주는 경우도 있을 것이다.)
  이 부분은 비즈니스에 얽혀서 회사, 팀에 따라 다른 정책을 사용할 수 있는 영역이다.
