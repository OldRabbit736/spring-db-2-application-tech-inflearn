외부 롤백
- 내부 트랜잭션은 커밋 하였지만 외부 트랜잭션이 롤백되는 상황
- 논리 트랜잭션이 하나라도 롤백되면 물리 트랜잭션은 롤백된다.
- 따라서 내부 트랜잭션이 커밋했어도 내부 트랜잭션 안에서 저장한 데이터도 모두 함께 롤백된다.
- BasicTxTest::outer_rollback 참조


내부 롤백
- 내부 트랜잭션이 롤백하는 상황 (외부 롤백은 커밋)
- 내부 트랜잭션은 신규 트랜잭션이 아니기 때문에 물리 트랜잭션에 영향을 주지 않는다. (적어도 지금까지는)
- 전체를 롤백해야 하는데 스프링은 어떻게 이 문제를 해결할까?
- BasicTxTest::inner_rollback 참조
    - 내부 트랜잭션 롤백 시 - 실제 물리 트랜잭션은 롤백하지 않지만 트랜잭션을 "롤백 전용"으로 표시한다.
    - 외부 트랜잭션 커밋 시 - 커밋을 호출하였지만 "롤백 전용"으로 표시되어 있기 때문에 롤백이 실행된다.
- "10. 스프링 트랜잭션 전파1-기본.pdf" 24페이지 참조
- 신규 트랜잭션이 아닌(내부 트랜잭션) 롤백을 호출할 경우
    - 실제 롤백을 호출하지 않는다.
    - 트랜잭션 매니저는 대신 트랜잭션 동기화 매니저에 rollback-only 로 표시한다.
- 신규 트랜잭션(외부 트랜잭션)이 롤백이나 커밋을 호출할 경우
    - 트랜잭션 매니저는 트랜잭션 동기화 매니저에 rollback-only 표시가 되어 있다면 rollback을 수행한다.
    - 만약 커밋을 호출했었 더라도 rollback 을 수행하고, UnexpectedRollbackException 런타임 예외를 발생시킨다.
    - 그렇게 해서 코드와는 다르게 롤백이 발생했다는 것을 외부에 명확하게 알리는 것이다.
    * 애플리케이션 개발에서 중요한 기본 원칙은 모호함을 제거하는 것이다. 커밋을 호출했는데 내부에서 롤백이 발생한다면 명확하게 알려주어야 한다.
- 정리
    - 논리 트랜잭션이 하나라도 롤백되면 물리 트랜잭션은 롤백된다.
    - 내부 논리 트랜잭션이 롤백 호출하면 트랜잭션 동기화 매니저 내부에 롤백 only가 마크된다.
    - 외부 트랜잭션에 대해 커밋 호출하면 트랜잭션 매니저가 트랜잭션 동기화 매니저 내부에 롤백 only 마크를 확인한다.
        - 롤백 전용 마크가 있다면 물리 트랜잭션을 롤백하고 UnexpectedRollbackException 예외를 던진다.
        - 마크가 없다면 커밋한다.
